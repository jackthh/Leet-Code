# 1332. Remove Palindromic Subsequences
# Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
# Return the minimum number of steps to make the given string empty.
# A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
# A string is called palindrome if is one that reads the same backward as well as forward.


class Solution:
    def removePalindromeSub(self, s: str) -> int:
        steps = 0
        chuoi = s

        while chuoi != "":
            for x in self.longestPalSubseq(chuoi):
                chuoi = chuoi[0: x:] + chuoi[x + 1::]
            steps += 1
            if chuoi == "":
                print("chuoi bang null")
            print(chuoi)
        return steps



    def lcs_(self, X, Y):
        m = len(X)
        n = len(Y)

        L = [[0] * (n + 1)] * (m + 1)

        for i in range(n + 1):

            for j in range(n + 1):

                if (i == 0 or j == 0):
                    L[i][j] = 0;
                elif (X[i - 1] == Y[j - 1]):
                    L[i][j] = L[i - 1][j - 1] + 1;
                else:
                    L[i][j] = max(L[i - 1][j],
                                  L[i][j - 1]);

        index = L[m][n];

        lcs = [" "] * (index + 1)

        i, j = m, n

        ans = []
        while (i > 0 and j > 0):

            if (X[i - 1] == Y[j - 1]):

                ans.append(i - 1)
                lcs[index - 1] = X[i - 1]
                i -= 1
                j -= 1

                index -= 1

            elif (L[i - 1][j] > L[i][j - 1]):
                i -= 1

            else:
                j -= 1


        return ans


    def longestPalSubseq(self, string):
        rev = string[:: -1]

        return self.lcs_(string, rev)

abc = Solution().removePalindromeSub("ababb")
print(abc)